import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { useNavigate } from "react-router-dom";
import { User, UserRole, Sport } from "@/types";

// Default values for the auth context
const defaultAuthContext = {
  user: null as User | null,
  isAuthenticated: false,
  login: async (_email: string, _password: string) => {},
  register: async (_name: string, _email: string, _password: string, _role: UserRole) => {},
  logout: () => {},
};

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (name: string, email: string, password: string, role: UserRole) => Promise<void>;
  logout: () => void;
}

// Create a context with default values
const AuthContext = createContext<AuthContextType>(defaultAuthContext);

interface AuthProviderProps {
  children: ReactNode;
}

// Create mock users for demonstration
const mockCoachUser: User = {
  id: 1,
  name: "Guru Drona",
  email: "coach@example.com",
  role: "coach",
  sports: ["archery" as Sport],
  rating: 4.9,
  students: 48,
  bio: "Elite archery coach with over 15 years of experience training national and international champions.",
  experience: "15+ Years Experience",
  achievements: ["National Coach Award 2020", "Olympic Medal Coach 2016"]
};

const mockAthleteUser: User = {
  id: 2,
  name: "Arjun Sharma",
  email: "athlete@example.com",
  role: "athlete",
  sports: ["archery" as Sport],
  bio: "Passionate about improving my archery skills and reaching new heights in my sporting journey.",
  achievements: ["Regional Gold Medal 2022", "National Bronze 2023"]
};

export function AuthProvider({ children }: AuthProviderProps) {
  // Initialize state based on localStorage directly
  const storedUser = localStorage.getItem("ekalavya_user");
  const initialUser = storedUser ? JSON.parse(storedUser) : null;
  
  const [user, setUser] = useState<User | null>(initialUser);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!initialUser);
  
  const navigate = useNavigate();

  const login = async (email: string, password: string) => {
    try {
      // Simulated login with mock users
      let userData: User;
      
      if (email === "coach@example.com") {
        userData = mockCoachUser;
      } else {
        userData = mockAthleteUser;
      }
      
      // Save user data to state and localStorage
      setUser(userData);
      setIsAuthenticated(true);
      localStorage.setItem("ekalavya_user", JSON.stringify(userData));
      
      // Add a small delay before navigation to ensure state is updated
      setTimeout(() => {
        navigate("/");
      }, 100);
    } catch (error) {
      console.error("Login failed:", error);
      throw error;
    }
  };
  
  const register = async (name: string, email: string, password: string, role: UserRole) => {
    try {
      // Create a new user with the provided details
      const newUser: User = {
        id: 3, // In a real app, this would be generated by the backend
        name,
        email,
        role,
        sports: ["archery" as Sport],
        rating: role === "coach" ? 4.5 : undefined,
        students: role === "coach" ? 0 : undefined,
      };
      
      // Save user data to state and localStorage
      setUser(newUser);
      setIsAuthenticated(true);
      localStorage.setItem("ekalavya_user", JSON.stringify(newUser));
      
      navigate("/");
    } catch (error) {
      console.error("Registration failed:", error);
      throw error;
    }
  };
  
  const logout = () => {
    setUser(null);
    setIsAuthenticated(false);
    localStorage.removeItem("ekalavya_user");
    navigate("/login");
  };
  
  return (
    <AuthContext.Provider value={{ user, isAuthenticated, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
