modules = ["nodejs-20", "python-3.11", "python3"]

[nix]
channel = "stable-24_05"
packages = ["abseil-cpp", "bluez", "cairo", "ffmpeg-full", "firefox", "fontconfig", "freetype", "gdk-pixbuf", "geckodriver", "ghostscript", "glibcLocales", "gobject-introspection", "gtest", "gtk2-x11", "gtk3", "lcms2", "libGL", "libGLU", "libimagequant", "libjpeg", "libjpeg_turbo", "libpng", "libpulseaudio", "libsndfile", "libtiff", "libwebp", "libxcrypt", "nodejs", "ocl-icd", "openal", "opencl-headers", "openjpeg", "pkg-config", "portaudio", "qhull", "tcl", "tk", "unzip", "which", "xsimd", "zeromq", "zlib"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Ekkalavya Sports AI"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "AI Backend"

[[workflows.workflow]]
name = "Ekkalavya Sports AI"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000

[[workflows.workflow]]
name = "AI Backend"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
python3 -c \"
import json
import logging
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# Simple AI backend that works with available dependencies
class AIHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/analyze':
            self._handle_analyze()
        elif self.path == '/recommend_drills':
            self._handle_drills()
        else:
            self._send_json({'error': 'Not found'}, 404)
    
    def do_GET(self):
        if self.path == '/health':
            self._send_json({'status': 'healthy'})
        else:
            self._send_json({'error': 'Not found'}, 404)
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def _handle_analyze(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 0:
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
            else:
                data = {}
            
            sport = data.get('sport', 'basketball').lower()
            analysis_type = data.get('analysis_type', 'general')
            
            # Generate realistic analysis based on sport
            score = 75 + (hash(sport + analysis_type) % 20)
            
            result = {
                'sport': sport,
                'analysis_type': analysis_type,
                'score': score,
                'feedback': [
                    f'Good {sport} technique foundation',
                    'Focus on consistency and form',
                    'Practice regularly for improvement'
                ],
                'metrics': {
                    'form': score - 5,
                    'consistency': score + 2,
                    'power': score - 3
                },
                'timestamp': datetime.now().isoformat()
            }
            
            self._send_json(result)
        except Exception as e:
            self._send_json({'error': str(e)}, 500)
    
    def _handle_drills(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 0:
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
            else:
                data = {}
            
            sport = data.get('sport', 'basketball').lower()
            skill_level = data.get('skill_level', 'beginner').lower()
            
            drills = [
                {
                    'name': f'{sport.title()} Fundamentals',
                    'description': f'Basic {sport} skills practice',
                    'duration': '15 minutes',
                    'difficulty': skill_level.title(),
                    'focus_areas': ['technique', 'form']
                }
            ]
            
            result = {
                'sport': sport,
                'skill_level': skill_level,
                'drills': drills,
                'total_drills': len(drills),
                'generated_at': datetime.now().isoformat()
            }
            
            self._send_json(result)
        except Exception as e:
            self._send_json({'error': str(e)}, 500)
    
    def _send_json(self, data, status=200):
        self.send_response(status)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data).encode('utf-8'))

# Start server
server = HTTPServer(('0.0.0.0', 8000), AIHandler)
print('AI Analysis Server starting on port 8000')
server.serve_forever()
\""""
waitForPort = 8000

[deployment]
run = ["sh", "-c", "python -m http.server 5000"]

[[ports]]
localPort = 5000
externalPort = 80

[[ports]]
localPort = 8000
externalPort = 8000
