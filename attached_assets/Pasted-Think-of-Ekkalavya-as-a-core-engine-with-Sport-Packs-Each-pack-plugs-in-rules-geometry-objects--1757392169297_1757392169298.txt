Think of Ekkalavya as a core engine with “Sport Packs.” Each pack plugs in rules, geometry, objects, and decision logic for a sport—but the pipeline stays the same.

1) Unified engine (works for every sport)

Ingest → Calibrate surface → Detect & track agents → Understand context → Generate options/events → Render overlays → Save metrics.

Reusable components:

Surface model: pitch/court template + homography (or IMU/AR anchors for indoor drills).

Agent model: players, ball/object, officials, zones.

Event grammar: pass/shot/serve/return/tackle/block/etc.

Option graph: generic “actions from actor to targets under constraints.”

Renderer: arrows, cones, lanes, heat/space, labels; warped back to video.


2) Sport Packs (what each one defines)

Geometry: size, key lines, zones (e.g., D-box, three-point arc, service boxes).

Objects: ball/shuttle/puck/javelin/discus; posts/nets/hoops.

Team roles: positions and typical off-ball routes (templates).

Rules & constraints: offsides, 3-sec, double bounce, crease rules, lane violations.

Actions: pass, cross, through ball, cut, pick-and-roll, lob, smash, volley, clear, rally, approach, block, feint, drive, etc.

Value model: xT/EPV (invasion games), Shot Quality (e.g., xG/xP), Rally Advantage (racquet), Form Score (biomechanics sports).

Overlay styles: what to draw (lanes, angles, arcs, cones, ghost runs).


Example Sport Packs & overlays

Football/Hockey/Handball (invasion games): lines, lanes, defensive compactness, unmarked receivers, through-ball feasibility, xT heat, press traps.

Basketball: passing tree from ball-handler, help-defense shifts, PnR lanes, shot quality (distance + contest), 3-sec violations, off-ball cuts.

Badminton/Tennis/Squash (racquet): serve target maps, return depth, open-court triangles, footwork path, shot selection tree (clear/drop/smash/drive), rally momentum.

Volleyball: receive formation, set options, block coverage heat, attack angles, seam targeting.

Cricket: fielding rings, wagon wheel, optimal field placements vs batter zones, length/line heat, running lines; for bowlers: seam/pace + landing area chart.

Athletics/Swimming: biomechanics focus—joint angles, cadence, stride length, take-off angles, block reaction—overlay lines, timing bars, “ideal band.”

Combat (Boxing/Judo/Wrestling/Karate): stance footprint, center-of-mass corridor, distance bands (outside/inside), combo options, grip/entry windows.

Archery/Target: shot grouping dispersion, anchor consistency heat, bow tilt and release timing bars.


3) Minimal config per sport (one file)

{
  "sport": "basketball",
  "surface": { "width_m": 28.65, "height_m": 15.24, "landmarks": ["3pt_arc","key","rim","baseline","sideline"] },
  "objects": ["ball","rim","backboard"],
  "teams": 2,
  "actions": ["pass","drive","shoot","screen","roll","kickout"],
  "rules": { "defensive_3sec": true, "backcourt": true },
  "value_model": "shot_quality",
  "overlays": ["passing_lanes","help_shifts","shot_arc","spacing_heat"]
}

The engine reads this to pick geometry, rules, and which overlays to render.

4) Detection & models (modular “model zoo”)

People/pose: YOLO-pose/MediaPipe across sports.

Sport-object heads: tiny heads per object family (ball/puck/shuttle/discus/javelin).

Domain classifiers: jersey colors (team split) or kit/role classifier (basketball positions).

Biomech lines: pose → joint angles (elbow, knee, hip, shoulder), spatiotemporal metrics (cadence, approach velocity).


5) Decision logic templates

Invasion games: pass lane clearance (time-to-intercept), unmarked threshold, xT grid → best option.

Racquet: open-court value (opponent displacement + time-to-recover), recommended target (deep cross, body, short-angle), footwork path overlay.

Basketball: PnR automaton: screen → read low man → kick vs pocket pass → shot quality.

Cricket: suggest field adjustments vs batter wagon zones; bowler optimal length line; run-out risk based on fielder distances/angles.

Biomech sports: compare measured angles/timings to “gold band” for that drill; color bands green/amber/red.


6) Rendering primitives (reused everywhere)

Vectors: arrows, cones, bezier curves (cuts), ghost-runs.

Zones: heatmaps, Voronoi, ribbons (defensive line), shot arcs, landing boxes.

Labels: auto text (“unmarked”, “best option”, “help late”, “ideal band”).

Temporal bars: cadence, split times, reaction times.


7) Dashboard & UX

Sport switcher (top-right) → loads Sport Pack + overlay set.

Clip templates per sport: “Counterattack,” “PnR,” “Serve+1,” “First Volley,” “Block & Cover,” “Length Control,” “Approach Jump,” “Take-off Angle,” etc.

Coach presets: choose overlay bundle: Tactics, Technique, Fitness.

Player view: same clip + actionable tips (“2 better options were open”, “Footwork path: cross-step to split-step sooner.”)


8) Phased rollout (fastest path)

1. Phase A – Invasion pack: ship Football → reuse to Hockey & Handball quickly (same logic with smaller court + different offside/crease rules).


2. Phase B – Basketball: PnR pack + shot quality; reuse people/ball + new court geometry.


3. Phase C – Racquet: serve/return and open-court value; simple shuttle/ball head + court calibration by service lines.


4. Phase D – Biomech set: Athletics/Swimming/Gymnastics/Yoga—pose metrics, timing bars, target bands (no team logic needed).


5. Phase E – Cricket: wagon wheel, fielding overlays, bowler length; separate batting/bowling sessions.



9) Data & labeling you’ll need

Universal: 10–20 games per sport type for tracking; 100–200 clips per key event template.

Racquet/biomech: pose + landmark quality labels for a few sessions per athlete.

Cricket: historical balls with length/line + outcome; field map snapshots.


10) Tech stack recap

CV/ML: Ultralytics YOLO + ByteTrack/OC-SORT; OpenCV homography; MediaPipe/YOLO-pose.

Valuation models: xT/EPV grids (invasion), shot-quality models (basketball, racquet), dispersion/consistency scores (archery).

Services: Python FastAPI + Redis queue + FFmpeg; Postgres for events/metrics.

Clients: your existing Coach/Player dashboards + mobile AR viewer (same renderer with sport-specific layers toggled).