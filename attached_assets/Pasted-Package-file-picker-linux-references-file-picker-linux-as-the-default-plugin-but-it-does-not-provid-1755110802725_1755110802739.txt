Package file_picker:linux references file_picker:linux as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: linux: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: linux:` `pluginClass` or `dartPluginClass`.


Package file_picker:macos references file_picker:macos as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: macos: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: macos:` `pluginClass` or `dartPluginClass`.


Package file_picker:windows references file_picker:windows as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: windows: default_package: file_picker` or add an      
inline implementation to file_picker via `platforms: windows:` `pluginClass` or `dartPluginClass`.


Package file_picker:linux references file_picker:linux as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: linux: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: linux:` `pluginClass` or `dartPluginClass`.


Package file_picker:macos references file_picker:macos as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: macos: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: macos:` `pluginClass` or `dartPluginClass`.


Package file_picker:windows references file_picker:windows as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: windows: default_package: file_picker` or add an      
inline implementation to file_picker via `platforms: windows:` `pluginClass` or `dartPluginClass`.


Package file_picker:linux references file_picker:linux as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: linux: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: linux:` `pluginClass` or `dartPluginClass`.


Package file_picker:macos references file_picker:macos as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: macos: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: macos:` `pluginClass` or `dartPluginClass`.


Package file_picker:windows references file_picker:windows as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: windows: default_package: file_picker` or add an      
inline implementation to file_picker via `platforms: windows:` `pluginClass` or `dartPluginClass`.


Package file_picker:linux references file_picker:linux as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: linux: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: linux:` `pluginClass` or `dartPluginClass`.


Package file_picker:macos references file_picker:macos as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: macos: default_package: file_picker` or add an inline 
implementation to file_picker via `platforms: macos:` `pluginClass` or `dartPluginClass`.


Package file_picker:windows references file_picker:windows as the default plugin, but it does not provide an inline implementation.
Ask the maintainers of file_picker to either avoid referencing a default implementation via `platforms: windows: default_package: file_picker` or add an      
inline implementation to file_picker via `platforms: windows:` `pluginClass` or `dartPluginClass`.


Launching lib\main.dart on motorola edge 20 fusion in debug mode...

FAILURE: Build failed with an exception.

* What went wrong:
Could not open cp_settings generic class cache for settings file 'C:\Users\User\Desktop\EkkalavyaAISports\flutter_app\android\settings.gradle' (C:\Users\User\.gradle\caches\7.5\scripts\40xe29260s4q69akmg4foaru9).
> BUG! exception in phase 'semantic analysis' in source unit '_BuildScript_' Unsupported class file major version 65

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 1m 54s
Running Gradle task 'assembleDebug'...                            116.2s

┌─ Flutter Fix ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐   
│ [!] Your project's Gradle version is incompatible with the Java version that Flutter is using for Gradle.                                               │   
│                                                                                                                                                         │   
│ If you recently upgraded Android Studio, consult the migration guide at https://flutter.dev/to/java-gradle-incompatibility.                             │   
│                                                                                                                                                         │   
│ Otherwise, to fix this issue, first, check the Java version used by Flutter by running `flutter doctor --verbose`.                                      │
│                                                                                                                                                         │   
│ Then, update the Gradle version specified in C:\Users\User\Desktop\EkkalavyaAISports\flutter_app\android\gradle\wrapper\gradle-wrapper.properties to be │   
│ compatible with that Java version. See the link below for more information on compatible Java/Gradle versions:                                          │   
│ https://docs.gradle.org/current/userguide/compatibility.html#java                                                                                       │   
│                                                                                                                                                         │   
│                                                                                                                                                         │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘   
Error: Gradle task assembleDebug failed with exit code 1
